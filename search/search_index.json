{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snakelines wrappers","text":"<p>This is a port of snakelines rules to modular wrappers, the best practice, recommended by the snakemake authors.</p> <p>Note</p> <p>Private rules are stored elsewhere.</p>"},{"location":"#how-to-write-a-wrapper","title":"How to write a wrapper","text":"<p>TBA</p> <p>Question</p> <p>If you have any questions or problems, please raise an issue on Github.</p>"},{"location":"bowtie2_index/","title":"Bowtie2 indexing","text":"<p>See tool documentation.</p>"},{"location":"bowtie2_index/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bowtie2__prepare_index:\ninput:\nreference=\"test.fa\",\noutput:\nidx=multiext(\n\"bowtie2_index/genome\",\n\".1.bt2\",\n\".2.bt2\",\n\".3.bt2\",\n\".4.bt2\",\n\".rev.1.bt2\",\n\".rev.2.bt2\",\n),\nparams:\nprefix=lambda wildcards, output: output.idx[0][: -len(\".1.bt2\")],\nlog:\nout=\"logs/bowtie2__prepare_index.log\",\nthreads: 2\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bowtie2/index\"\n</code></pre>"},{"location":"bowtie2_index/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bowtie2=2.4.4\n</code></pre>"},{"location":"bowtie2_index/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nshell(\n\"bowtie2-build \"\n\" --threads {snakemake.threads} \"\n\" {snakemake.input.reference}\"\n\" {snakemake.params.prefix}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"bowtie2_map/","title":"Bowtie2 mapping","text":"<p>See tool documentation.</p>"},{"location":"bowtie2_map/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bowtie2__map_reads_to_reference:\ninput:\nreads=[\"read_R1.fastq.gz\", \"read_R2.fastq.gz\"],\nidx=multiext(\n\"bowtie2_index/genome\",\n\".1.bt2\",\n\".2.bt2\",\n\".3.bt2\",\n\".4.bt2\",\n\".rev.1.bt2\",\n\".rev.2.bt2\",\n),\noutput:\nbam=\"mapping.bam\",\nparams:\nprefix=lambda wildcards, input: input.idx[0][: -len(\".1.bt2\")],\nthreads: 2\nlog:\n\"logs/bowtie2__map_reads_to_reference.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bowtie2/map\"\n</code></pre>"},{"location":"bowtie2_map/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bowtie2=2.4.4\n- samtools=1.13\n</code></pre>"},{"location":"bowtie2_map/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nif len(snakemake.input.reads) == 1:\ninput_arg = f\"-U {snakemake.input.reads[0]}\"\nelse:\ninput_arg = f\"-1 {snakemake.input.reads[0]} -2 {snakemake.input.reads[1]}\"\nextra = snakemake.params.get(\"extra\", \"\")\nshell(\n\"(bowtie2 \"\n\" -x {snakemake.params.prefix}\"\n\" {input_arg}\"\n\" --threads {snakemake.threads}\"\n\" {extra}\"\n\" |\"\n\" samtools view -bS -\"\n\" &gt; {snakemake.output.bam}\"\n\") {log}\"\n)\n</code></pre>"},{"location":"bwa_filter/","title":"BWA filtering","text":"<p>See tool documentation.</p>"},{"location":"bwa_filter/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bwa__filter_reads_from_reference_pe:\ninput:\nr1=\"test_sample_R1.fastq.gz\",\nr2=\"test_sample_R2.fastq.gz\",\nindex=multiext(\"bwa_index/ref\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\noutput:\nr1=\"filtered/test_sample_R1.fastq.gz\",\nr2=\"filtered/test_sample_R2.fastq.gz\",\nparams:\nindices=[\"bwa_index/ref\"],\nkeep_param=\"-F 2\",\nsample=lambda w, input: os.path.basename(input.r1).replace(\"_R1.fastq.gz\", \"\"),\nthreads: 2\nlog:\n\"logs/bwa__filter_reads_from_reference.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bwa/filter\"\n</code></pre>"},{"location":"bwa_filter/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bwa=0.7.17\n- samtools=1.13\n</code></pre>"},{"location":"bwa_filter/#code","title":"Code","text":"<pre><code>import os\nimport tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=False, stderr=True)\nPRESUMED_SUFFIX = \"_R1.fastq.gz\"\nif not snakemake.input.r1.endswith(PRESUMED_SUFFIX):\nraise ValueError(f\"{snakemake.input.r1} does not ends with {PRESUMED_SUFFIX}\")\nsample_name = os.path.basename(snakemake.input.r1).replace(PRESUMED_SUFFIX, \"\")\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"(\"\n\" R1_IN={snakemake.input.r1};\"\n\" R2_IN={snakemake.input.r2};\"\n\" for INDEX in {snakemake.params.indices}; do\"\n\"  REF=`basename $INDEX`;\"\n\"  REF_DIR={tmpdir}/$REF;\"\n\"  mkdir -p $REF_DIR;\"\n\"  BAM_OUT=$REF_DIR/{sample_name}_out.bam;\"\n\"  R1_OUT=$REF_DIR/{sample_name}_R1.fastq.gz;\"\n\"  R2_OUT=$REF_DIR/{sample_name}_R2.fastq.gz;\"\n\"  bwa mem \"\n\"   -t {snakemake.threads}\"\n\"   $INDEX\"\n\"   $R1_IN\"\n\"   $R2_IN\"\n\"  |\"\n\"  samtools view\"\n\"   -o $BAM_OUT;\"\n\"  samtools collate\"\n\"   -u -O $BAM_OUT\"\n\"  |\"\n\"  samtools fastq\"\n\"   -1 $R1_OUT\"\n\"   -2 $R2_OUT\"\n\"   {snakemake.params.keep_param}\"\n\"   -0 /dev/null\"\n\"   -s /dev/null\"\n\"   -t\"\n\"   -n;\"\n\"  R1_IN=$R1_OUT;\"\n\"  R2_IN=$R2_OUT;\"\n\" done;\"\n\" mv $R1_OUT {snakemake.output.r1};\"\n\" mv $R2_OUT {snakemake.output.r2};\"\n\" ) {log}\"\n)\n</code></pre>"},{"location":"bwa_filter_se/","title":"BWA filtering single-end variant","text":"<p>See tool documentation.</p>"},{"location":"bwa_filter_se/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bwa__filter_reads_from_reference_se:\ninput:\nread=\"test_sample.fastq.gz\",\nindex=multiext(\"bwa_index/ref\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\noutput:\nread=\"filtered/test_sample.fastq.gz\",\nparams:\nindices=[\"bwa_index/ref\"],\nkeep_param=\"-F 2\",\nthreads: 2\nlog:\n\"logs/bwa/filter_reads_from_reference_se.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bwa/filter_se\"\n</code></pre>"},{"location":"bwa_filter_se/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bwa=0.7.17\n- samtools=1.13\n</code></pre>"},{"location":"bwa_filter_se/#code","title":"Code","text":"<pre><code>import os\nimport tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=False, stderr=True)\nsample = os.path.basename(snakemake.input.read)\nsample = sample.replace(\".fastq.gz\", \"\")\nsample = sample.replace(\".fastq\", \"\")\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"(\"\n\" R_IN={snakemake.input.read};\"\n\" for INDEX in {snakemake.params.indices}; do\"\n\"  REF=`basename $INDEX`;\"\n\"  REF_DIR={tmpdir}/$REF;\"\n\"  mkdir -p $REF_DIR;\"\n\"  BAM_OUT=$REF_DIR/{sample}_out.bam;\"\n\"  R_OUT=$REF_DIR/{sample}.fastq.gz;\"\n\"  bwa mem \"\n\"   -t {snakemake.threads}\"\n\"   $INDEX\"\n\"   $R_IN\"\n\"  |\"\n\"  samtools view\"\n\"   -o $BAM_OUT;\"\n\"  samtools collate\"\n\"   -u -O $BAM_OUT\"\n\"  |\"\n\"  samtools fastq\"\n\"   -o $R_OUT\"\n\"   {snakemake.params.keep_param}\"\n\"   -0 /dev/null\"\n\"   -s /dev/null\"\n\"   -t\"\n\"   -n;\"\n\"  R_IN=$R_OUT;\"\n\" done;\"\n\" mv $R_OUT {snakemake.output.read};\"\n\" ) {log}\"\n)\n</code></pre>"},{"location":"bwa_index/","title":"BWA indexing","text":"<p>See tool documentation.</p>"},{"location":"bwa_index/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bwa__build_index:\ninput:\n\"ref.fa\",\noutput:\nidx=multiext(\"bwa_index/ref\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\nparams:\nprefix=lambda wildcards, output: os.path.splitext(output.idx[0])[0],\napproach=\"bwtsw\",\nlog:\n\"logs/bwa/build_index.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bwa/index\"\n</code></pre>"},{"location":"bwa_index/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bwa=0.7.17\n</code></pre>"},{"location":"bwa_index/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=False, stderr=True)\nshell(\"bwa index -p {snakemake.params.prefix} -a {snakemake.params.approach} {snakemake.input[0]} {log}\")\n</code></pre>"},{"location":"bwa_map/","title":"BWA mapping","text":"<p>See tool documentation.</p>"},{"location":"bwa_map/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule bwa__map_reads_to_reference:\ninput:\nreads=[\"test_sample_R1.fastq.gz\", \"test_sample_R2.fastq.gz\"],\nindex=multiext(\"bwa_index/ref\", \".amb\", \".ann\", \".bwt\", \".pac\", \".sa\"),\nread_group=\"test_sample.txt\",\noutput:\nbam=\"test_sample.bam\",\nparams:\nfilter=\"-F 4\",\nlog:\n\"logs/bwa__map_reads_to_reference.log\",\nthreads: 2\nresources:\nmem_mb=2048,\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/bwa/map\"\n</code></pre>"},{"location":"bwa_map/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- bwa=0.7.17\n- samtools=1.17\n</code></pre>"},{"location":"bwa_map/#code","title":"Code","text":"<pre><code>import os\nimport tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=False, stderr=True)\nif len(snakemake.input.reads) == 1:\ninput_reads = snakemake.input.reads[0]\nelif len(snakemake.input.reads) == 2:\ninput_reads = f\"{snakemake.input.reads[0]} {snakemake.input.reads[1]}\"\nelse:\nraise ValueError(f\"Expected 1 or 2 reads, got {len(snakemake.input.reads)}\")\nindex = os.path.splitext(snakemake.input.index[0])[0]\nfilter_param = snakemake.params.get(\"filter\", \"\")\nfilter_arg = \"\"\nif filter_param:\nfilter_arg = \"| samtools view \" + filter_param + \" -b -u\"\ntotal_memory = snakemake.resources.get(\"mem_mb\", 0)\nthread_memory = int(total_memory / snakemake.threads)\nmemory_arg = \"\"\nif thread_memory != 0:\nmemory_arg = f\"-m {thread_memory}M\"\nadditional_threads = int(snakemake.threads) - 1\nthreads_arg = \"\"\nif additional_threads &gt; 0:\nthreads_arg = f\" -@ {additional_threads}\"\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"(bwa mem -t {snakemake.threads}\"\n\" -R \\\"$(sed 's/\\\\t/\\\\\\\\t/g' &lt; {snakemake.input.read_group})\\\"\"\n\" {index} {input_reads}\"\n\" {filter_arg}\"\n\" |\"\n\" samtools sort -o {snakemake.output.bam} {memory_arg} {threads_arg} -T {tmpdir}\"\n\" ) {log}\"\n)\n</code></pre>"},{"location":"cutadapt_paired/","title":"Cutadapt for paired samples","text":"<p>See tool documentation.</p>"},{"location":"cutadapt_paired/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule cutadapt__trim_reads_pe:\ninput:\nr1=\"test_sample_R1.fastq.gz\",\nr2=\"test_sample_R2.fastq.gz\",\noutput:\nr1=\"trimmed/test_sample_R1.fastq.gz\",\nr2=\"trimmed/test_sample_R2.fastq.gz\",\nreport=\"trimmed/test_sample_cutadapt.json\",\nparams:\nanywhere_adapter=\"file:adapters.fasta\",\nfront_adapter=\"\",\nregular_adapter=\"\",\noverlap=10,\nerror_rate=0.1,\ntimes=1,\naction=\"trim\",\nminimum_length=\"3:3\",\nquality_cutoff=\"10,10\",\nhead_cut=1,\ntail_cut=2,\nthreads: 2\nlog:\n\"logs/cutadapt__trim_reads_paired.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/cutadapt/paired\"\n</code></pre>"},{"location":"cutadapt_paired/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- cutadapt=4.4\n</code></pre>"},{"location":"cutadapt_paired/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nextra = snakemake.params.get(\"extra\", \"\")\nshell(\n\"cutadapt\"\n\" --output {snakemake.output.r1}\"\n\" --paired-output {snakemake.output.r2}\"\n\" --cores {snakemake.threads}\"\n\" --action {snakemake.params.action}\"\n\" --overlap {snakemake.params.overlap}\"\n\" --times {snakemake.params.times}\"\n\" --error-rate {snakemake.params.error_rate}\"\n\" --report full\"\n\" --json={snakemake.output.report}\"\n\" {extra}\"\n\" {snakemake.input.r1}\"\n\" {snakemake.input.r2}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"cutadapt_single/","title":"Cutadapt for single-end samples","text":"<p>See tool documentation.</p>"},{"location":"cutadapt_single/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule cutadapt__trim_reads_se:\ninput:\nread=\"test_sample.fastq.gz\",\noutput:\nread=\"trimmed/test_sample.fastq.gz\",\nreport=\"trimmed/test_sample_cutadapt.json\",\nparams:\nanywhere_adapter=\"file:adapters.fasta\",\nfront_adapter=\"\",\nregular_adapter=\"\",\noverlap=10,\nerror_rate=0.1,\ntimes=1,\naction=\"trim\",\nminimum_length=3,\nquality_cutoff=\"10,10\",\nhead_cut=1,\ntail_cut=2,\nthreads: 2\nlog:\n\"logs/cutadapt__trim_reads_single.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/cutadapt/single\"\n</code></pre>"},{"location":"cutadapt_single/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- cutadapt=4.4\n</code></pre>"},{"location":"cutadapt_single/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nextra = snakemake.params.get(\"extra\", \"\")\nshell(\n\"cutadapt\"\n\" --output {snakemake.output.read}\"\n\" --cores {snakemake.threads}\"\n\" --action {snakemake.params.action}\"\n\" --overlap {snakemake.params.overlap}\"\n\" --times {snakemake.params.times}\"\n\" --error-rate {snakemake.params.error_rate}\"\n\" --report full\"\n\" --json={snakemake.output.report}\"\n\" {extra}\"\n\" {snakemake.input.read}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"fastqc_quality/","title":"FastQC report","text":"<p>See tool documentation.</p>"},{"location":"fastqc_quality/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule fastqc__quality_report:\ninput:\nread=\"test_sample.fastq.gz\",\noutput:\nhtml=\"test_sample_fastqc.html\",\nzip=\"test_sample_fastqc.zip\",\nqc_data=\"test_sample_fastqc/fastqc_data.txt\",\nsummary_txt=\"test_sample_fastqc/summary.txt\",\nresources:\nmem_mb=512,\nlog:\n\"logs/fastqc/quality_report.log\",\nthreads: 2\nresources:\nmem_mb=512,\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/fastqc/quality\"\n</code></pre>"},{"location":"fastqc_quality/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- fastqc=0.12.1\n</code></pre>"},{"location":"fastqc_quality/#code","title":"Code","text":"<pre><code>import os\nimport tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\n# fastqc allocates memory per thread, so we need to divide the allocated memory per thread\ntotal_memory = snakemake.resources.get(\"mem_mb\", 0)\nthread_memory = int(total_memory / snakemake.threads)\nmemory_arg = \"\"\nif thread_memory != 0:\nmemory_arg = f\"--memory {thread_memory}\"\nPRESUMED_SUFFIX = \".fastq.gz\"\nif not snakemake.input.read.endswith(PRESUMED_SUFFIX):\nraise ValueError(f\"{snakemake.input.read} does not ends with {PRESUMED_SUFFIX}\")\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"fastqc --outdir {tmpdir} --extract --threads {snakemake.threads}\" \" {memory_arg} {snakemake.input.read} {log}\"\n)\nbase_name = os.path.basename(snakemake.input.read).replace(PRESUMED_SUFFIX, \"\")\nhtml_path = os.path.join(tmpdir, f\"{base_name}_fastqc.html\")\nzip_path = os.path.join(tmpdir, f\"{base_name}_fastqc.zip\")\nfastqc_datapath = os.path.join(tmpdir, f\"{base_name}_fastqc\", \"fastqc_data.txt\")\nsummary_path = os.path.join(tmpdir, f\"{base_name}_fastqc\", \"summary.txt\")\nshell(\"mv {html_path} {snakemake.output.html}\")\nshell(\"mv {zip_path} {snakemake.output.zip}\")\nshell(\"mv {fastqc_datapath} {snakemake.output.qc_data}\")\nshell(\"mv {summary_path} {snakemake.output.summary_txt}\")\n</code></pre>"},{"location":"picard_bedtointervallist/","title":"Picard BedToIntervalList","text":"<p>See tool documentation.</p>"},{"location":"picard_bedtointervallist/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule picard__bed_to_interval_list:\ninput:\nbed=\"regions.bed\",\nseq_dict=\"genome.dict\",\noutput:\nintervals=\"genome/regions.interval_list\",\nparams:\nunique_only=True,\ndo_sorting=True,\nlog:\n\"logs/picard__bed_to_interval_list.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/picard/bedtointervallist\"\n</code></pre>"},{"location":"picard_bedtointervallist/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- picard=2.26.1\n</code></pre>"},{"location":"picard_bedtointervallist/#code","title":"Code","text":"<pre><code>import tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell()\nunique_flag = \"UNIQUE=true\" if snakemake.params.get(\"unique_only\", False) else \"\"\nsort_flag = \"SORT=true\" if snakemake.params.get(\"do_sorting\", False) else \"\"\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"picard BedToIntervalList\"\n\" INPUT={snakemake.input.bed}\"\n\" SEQUENCE_DICTIONARY={snakemake.input.seq_dict}\"\n\" OUTPUT={snakemake.output.intervals}\"\n\" {sort_flag}\"\n\" {unique_flag}\"\n\" TMP_DIR={tmpdir}\"\n\" VALIDATION_STRINGENCY=SILENT\"\n\" {log}\"\n)\n</code></pre>"},{"location":"picard_createsequencedictionary/","title":"Picard CreateSequenceDictionary","text":"<p>See tool documentation.</p>"},{"location":"picard_createsequencedictionary/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule picard__prepare_dict_index:\ninput:\nreference=\"genome.fa\",\noutput:\nseq_dict=\"genome.dict\",\nlog:\n\"logs/picard/prepare_dict_index.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/picard/createsequencedictionary\"\n</code></pre>"},{"location":"picard_createsequencedictionary/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- picard=2.26.1\n</code></pre>"},{"location":"picard_createsequencedictionary/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=False, stderr=True)\nshell(\n\" picard CreateSequenceDictionary\"\n\" REFERENCE={snakemake.input.reference}\"\n\" OUTPUT={snakemake.output.seq_dict}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"picard_markduplicates/","title":"Picard MarkDuplicates","text":"<p>See tool documentation.</p>"},{"location":"picard_markduplicates/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule picard__mark_duplicates:\ninput:\nbam=\"test_sample.bam\",\nbai=\"test_sample.bam.bai\",\noutput:\nbam=\"deduplicated.bam\",\nstat=\"deduplicated.stats\",\nresources:\nmem_mb=2048,\nlog:\n\"logs/picard__mark_duplicates.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/picard/markduplicates\"\n</code></pre>"},{"location":"picard_markduplicates/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- picard=2.26.1\n</code></pre>"},{"location":"picard_markduplicates/#code","title":"Code","text":"<pre><code>import tempfile\nfrom snakemake.shell import shell\nlog = snakemake.log_fmt_shell()\nmem_mb = snakemake.resources.get(\"mem_mb\", 0)\nif not mem_mb:\nmem_mb = snakemake.resources.get(\"mem_gb\", 0) * 1024\njava_mem_arg = \"\"\nif mem_mb:\njava_mem_mb = round(0.75 * mem_mb)\njava_mem_arg = \"-Xmx{}M\".format(java_mem_mb)\nwith tempfile.TemporaryDirectory() as tmpdir:\nshell(\n\"(\"\n\" picard MarkDuplicates\"\n\" {java_mem_arg}\"\n\" I={snakemake.input.bam}\"\n\" O={snakemake.output.bam}\"\n\" M={snakemake.output.stat}\"\n\" TMP_DIR={tmpdir}\"\n\" VALIDATION_STRINGENCY=SILENT\"\n\") {log}\"\n)\n</code></pre>"},{"location":"qualimap_bamqc/","title":"Qualimap bamQC report","text":"<p>See tool documentation.</p>"},{"location":"qualimap_bamqc/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule qualimap__mapping_quality_report:\ninput:\nbam=\"test_sample.bam\",\nbai=\"test_sample.bam.bai\",\noutput:\nreport_dir=directory(\"bamqc_test_sample\"),\nparams:\nextra=[\n\"--paint-chromosome-limits\",\n\"-outformat PDF:HTML\",\n],\nresources:\nmem_mb=4096,\nlog:\n\"logs/qualimap__mapping_quality_report.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/qualimap/bamqc\"\n</code></pre>"},{"location":"qualimap_bamqc/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- qualimap=2.2.2d\n</code></pre>"},{"location":"qualimap_bamqc/#code","title":"Code","text":"<pre><code>import os\nfrom snakemake.shell import shell\n# use the same way to unset DISPLAY as in official snakemake wrappers\nif os.environ.get(\"DISPLAY\"):\ndel os.environ[\"DISPLAY\"]\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nextra = snakemake.params.get(\"extra\", [])\nextra_str = \" \".join(extra)\nresources_str = \"\"\nif \"mem_mb\" in snakemake.resources.keys():\nmem = snakemake.resources[\"mem_mb\"]\nresources_str += f\"--java-mem-size={mem}M\"\nshell(\n\"qualimap bamqc\"\n\" -bam {snakemake.input.bam}\"\n\" -outdir {snakemake.output.report_dir}\"\n\" -nt {snakemake.threads}\"\n\" {extra_str}\"\n\" {resources_str}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"samtools_faidx/","title":"Samtools faidx","text":"<p>Use to index the reference sequence given in the FASTA format. See tool documentation.</p>"},{"location":"samtools_faidx/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule samtools__prepare_fai_index:\ninput:\nreference=\"genome.fa\",\noutput:\n\"genome.fa.fai\",\nlog:\n\"logs/samtools__prepare_fai_index.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/samtools/faidx\"\n</code></pre>"},{"location":"samtools_faidx/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- samtools=1.13\n</code></pre>"},{"location":"samtools_faidx/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nshell(\"samtools faidx {snakemake.input.reference}\")\n</code></pre>"},{"location":"samtools_index/","title":"Samtools index","text":"<p>Use to index the coordinate-sorted BGZIP-compressed SAM, BAM or CRAM files. See tool documentation.</p>"},{"location":"samtools_index/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule samtools__bam_index:\ninput:\nbam=\"test_sample.bam\",\noutput:\nbai=\"test_sample.bam.bai\",\nthreads: 2\nlog:\n\"logs/samtools__bam_index.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/samtools/index\"\n</code></pre>"},{"location":"samtools_index/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- samtools=1.16\n</code></pre>"},{"location":"samtools_index/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\n# Number of input/output compression threads to use in addition to main thread\n# from samtools index documentation: http://www.htslib.org/doc/samtools-index.html\nthreads = snakemake.threads - 1\nshell(\"samtools index -@ {threads} {snakemake.input.bam} {snakemake.output.bai} {log}\")\n</code></pre>"},{"location":"samtools_sort/","title":"Samtools sort","text":"<p>Use to sort alignments. See tool documentation.</p>"},{"location":"samtools_sort/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule samtools__sort_mapped_reads:\ninput:\nref=\"ref.fa\",\nbam=\"test_sample.bam\",\noutput:\nbam=\"sorted.bam\",\nlog:\n\"logs/samtools__sort_mapped_reads.log\",\nthreads: 2\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/samtools/sort\"\n</code></pre>"},{"location":"samtools_sort/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- samtools=1.13\n</code></pre>"},{"location":"samtools_sort/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell(stdout=True, stderr=True)\nshell(\n\"samtools sort\"\n\" -o {snakemake.output.bam}\"\n\" -m 2G\"\n\" --threads {snakemake.threads}\"\n\" --output-fmt BAM\"\n\" --reference {snakemake.input.ref}\"\n\" {snakemake.input.bam}\"\n\" {log}\"\n)\n</code></pre>"},{"location":"samtools_view/","title":"Samtools view","text":"<p>Use to convert sam to bam. See tool documentation.</p>"},{"location":"samtools_view/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule samtools__convert_sam_to_bam:\ninput:\nsam=\"test_sample.sam\",\noutput:\nbam=\"test_sample.bam\",\nlog:\n\"logs/samtools__convert_sam_to_bam.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/samtools/view\"\n</code></pre>"},{"location":"samtools_view/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- samtools=1.13\n</code></pre>"},{"location":"samtools_view/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nshell(\"samtools view -S -b {snakemake.input.sam} &gt; {snakemake.output.bam}\")\n</code></pre>"},{"location":"seqtk_subsample_paired/","title":"Seqtk sample","text":"<p>See tool documentation.</p>"},{"location":"seqtk_subsample_paired/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule seqtk__subsample_reads_pe:\ninput:\nr1=\"test_sample_R1.fastq.gz\",\nr2=\"test_sample_R2.fastq.gz\",\noutput:\nr1=\"subsampled/test_sample_R1.fastq.gz\",\nr2=\"subsampled/test_sample_R2.fastq.gz\",\nparams:\nseed=1,\nn_reads=3,\nreduce_memory=False,\nlog:\n\"logs/seqtk__subsample_reads_pe.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/seqtk/subsample_paired\"\n</code></pre>"},{"location":"seqtk_subsample_paired/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- seqtk=1.3\n- pigz =2.3\n</code></pre>"},{"location":"seqtk_subsample_paired/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell()\nreduce_memory = snakemake.params.get(\"reduce_memory\", True)\nreduce_memory_mode = \"-2\" if reduce_memory else \"\"\nshell(\n\"(\"\n\" seqtk sample\"\n\" -s {snakemake.params.seed}\"\n\" {reduce_memory_mode}\"\n\" {snakemake.input.r1}\"\n\" {snakemake.params.n_reads}\"\n\" |\"\n\" pigz -9\"\n\" -p {snakemake.threads}\"\n\" &gt; {snakemake.output.r1}\"\n\" &amp;&amp;\"\n\" seqtk sample\"\n\" -s {snakemake.params.seed}\"\n\" {reduce_memory_mode}\"\n\" {snakemake.input.r2}\"\n\" {snakemake.params.n_reads}\"\n\" |\"\n\" pigz -9\"\n\" -p {snakemake.threads}\"\n\" &gt; {snakemake.output.r2}\"\n\") {log}\"\n)\n</code></pre>"},{"location":"seqtk_subsample_single/","title":"Seqtk sample for single-end","text":"<p>See tool documentation.</p>"},{"location":"seqtk_subsample_single/#snakefile-example","title":"Snakefile example","text":"<pre><code>rule seqtk__subsample_reads_se:\ninput:\nread=\"test_sample.fastq.gz\",\noutput:\nread=\"subsampled/test_sample.fastq.gz\",\nparams:\nseed=1,\nn_reads=3,\nreduce_memory=False,\nlog:\n\"logs/seqtk__subsample_reads_se.log\",\nwrapper:\n\"https://github.com/xsitarcik/wrappers/raw/main/wrappers/seqtk/subsample_single\"\n</code></pre>"},{"location":"seqtk_subsample_single/#environment","title":"Environment","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- nodefaults\ndependencies:\n- seqtk=1.3\n- pigz =2.3\n</code></pre>"},{"location":"seqtk_subsample_single/#code","title":"Code","text":"<pre><code>from snakemake.shell import shell\nlog = snakemake.log_fmt_shell()\nreduce_memory = snakemake.params.get(\"reduce_memory\", True)\nreduce_memory_mode = \"-2\" if reduce_memory else \"\"\nshell(\n\"(\"\n\" seqtk sample\"\n\" -s {snakemake.params.seed}\"\n\" {reduce_memory_mode}\"\n\" {snakemake.input.read}\"\n\" {snakemake.params.n_reads}\"\n\" |\"\n\" pigz -9\"\n\" -p {snakemake.threads}\"\n\" &gt; {snakemake.output.read}\"\n\") {log}\"\n)\n</code></pre>"}]}